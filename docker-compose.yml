version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRICS_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data

  # Create S3 buckets
  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/iot-events;
      /usr/bin/mc mb myminio/iot-snapshots;
      /usr/bin/mc policy set public myminio/iot-events;
      /usr/bin/mc policy set public myminio/iot-snapshots;
      exit 0;
      "

  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

  # Application services
  reformer:
    build:
      context: .
      dockerfile: scripts/docker/Dockerfile.reformer
    hostname: reformer
    container_name: reformer
    depends_on:
      - kafka
      - minio
      - redis
    ports:
      - "8081:8080"
      - "9091:9090"
      - "9191:9091"
    environment:
      - ENVIRONMENT=development
      - AWS_REGION=us-west-2
      - KAFKA_BROKERS=kafka:29092
      - EVENT_BUCKET=iot-events
      - SNAPSHOT_BUCKET=iot-snapshots
      - CACHE_TYPE=redis
      - REFORMER_ID=reformer-dev-1
    volumes:
      - ./configs:/configs

  view-calculator:
    build:
      context: .
      dockerfile: scripts/docker/Dockerfile.calculator
    hostname: view-calculator
    container_name: view-calculator
    depends_on:
      - kafka
      - minio
      - redis
    ports:
      - "8082:8080"
      - "9092:9090"
      - "9192:9091"
    environment:
      - ENVIRONMENT=development
      - AWS_REGION=us-west-2
      - KAFKA_BROKERS=kafka:29092
      - EVENT_BUCKET=iot-events
      - SNAPSHOT_BUCKET=iot-snapshots
      - CACHE_TYPE=redis
      - VIEW_CALCULATOR_ID=view-calc-dev-1
      - DUCKDB_PATH=/tmp/iot.db
    volumes:
      - ./configs:/configs
      - duckdb-data:/tmp

  api-gateway:
    build:
      context: .
      dockerfile: scripts/docker/Dockerfile.api
    hostname: api-gateway
    container_name: api-gateway
    depends_on:
      - view-calculator
    ports:
      - "8080:8080"
      - "9093:9090"
      - "9193:9091"
    environment:
      - ENVIRONMENT=development
      - AWS_REGION=us-west-2
    volumes:
      - ./configs:/configs

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  minio-data:
  prometheus-data:
  grafana-data:
  duckdb-data:

networks:
  default:
    name: iot-processor-network